"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/home/Features.tsx":
/*!******************************************!*\
  !*** ./src/components/home/Features.tsx ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   comparisonData: function() { return /* binding */ comparisonData; },\n/* harmony export */   featureCategories: function() { return /* binding */ featureCategories; },\n/* harmony export */   features: function() { return /* binding */ features; },\n/* harmony export */   integrationGuides: function() { return /* binding */ integrationGuides; },\n/* harmony export */   keyMetrics: function() { return /* binding */ keyMetrics; },\n/* harmony export */   useCaseExamples: function() { return /* binding */ useCaseExamples; }\n/* harmony export */ });\n// src/data/features.ts\nconst features = [\n    {\n        id: \"unified-interface\",\n        title: \"Unified Interface\",\n        icon: \"Command\",\n        description: \"Access multiple APIs through a consistent and intuitive interface design, reducing learning curves.\",\n        longDescription: \"Our unified interface provides consistent patterns across all API integrations, making it easier to work with multiple services without learning different paradigms for each. Every API follows the same initialization, method naming, and error handling patterns.\",\n        benefits: [\n            \"Consistent method naming across all APIs\",\n            \"Standardized error handling patterns\",\n            \"Unified authentication flows\",\n            \"Shared configuration patterns\",\n            \"Reduced learning curve for new APIs\",\n            \"Faster development time\"\n        ],\n        technicalDetails: [\n            \"Abstract base classes ensure consistency\",\n            \"Standardized response formats\",\n            \"Common error types across all services\",\n            \"Shared middleware and interceptors\",\n            \"Consistent async/await patterns\"\n        ],\n        codeExample: \"// Same pattern for all APIs\\nconst gpt = new ChatGPT({ apiKey: 'your-key' });\\nconst spotify = new SpotifyAPI({ clientId: 'id', clientSecret: 'secret' });\\nconst stripe = new StripeAPI({ secretKey: 'key' });\\n\\n// Consistent error handling\\ntry {\\n  const result = await gpt.chat('Hello');\\n} catch (error) {\\n  console.log(error.service); // 'openai'\\n  console.log(error.code);    // 'rate_limit_exceeded'\\n  console.log(error.retryAfter); // 60 (seconds)\\n}\",\n        category: \"core\",\n        importance: \"high\"\n    },\n    {\n        id: \"typescript-support\",\n        title: \"TypeScript Support\",\n        icon: \"FileCode\",\n        description: \"Built with TypeScript from the ground up, providing robust type definitions for all API operations.\",\n        longDescription: \"Complete TypeScript definitions ensure type safety, better IDE support, and catch errors at compile time rather than runtime. Every method, response, and configuration option is fully typed.\",\n        benefits: [\n            \"Full IntelliSense support in VS Code\",\n            \"Compile-time error detection\",\n            \"Auto-completion for all methods and properties\",\n            \"Type-safe API responses\",\n            \"Better refactoring support\",\n            \"Self-documenting code through types\"\n        ],\n        technicalDetails: [\n            \"Strict TypeScript configuration\",\n            \"Generic types for flexible API responses\",\n            \"Discriminated unions for different response types\",\n            \"Branded types for ID validation\",\n            \"Conditional types for advanced use cases\"\n        ],\n        codeExample: \"// Full type safety\\ninterface ChatResponse {\\n  content: string;\\n  usage: {\\n    prompt_tokens: number;\\n    completion_tokens: number;\\n    total_tokens: number;\\n  };\\n  model: string;\\n  created: number;\\n}\\n\\nconst response: ChatResponse = await gpt.createChatCompletion({\\n  model: 'gpt-4',\\n  messages: [{ role: 'user', content: 'Hello' }],\\n  temperature: 0.7\\n});\\n//    ^-- Fully typed response with IntelliSense\",\n        category: \"developer-experience\",\n        importance: \"high\"\n    },\n    {\n        id: \"comprehensive-coverage\",\n        title: \"Comprehensive Coverage\",\n        icon: \"Layers\",\n        description: \"Support for major platforms and services with detailed method implementations and documentation.\",\n        longDescription: \"We support the most popular APIs with comprehensive method coverage, not just basic operations. Each service includes advanced features like webhooks, streaming, and batch operations.\",\n        benefits: [\n            \"15+ major API services supported\",\n            \"200+ methods across all services\",\n            \"Advanced features like streaming and webhooks\",\n            \"Regular updates for new API features\",\n            \"Complete endpoint coverage\",\n            \"Batch operation support\"\n        ],\n        technicalDetails: [\n            \"Full REST API coverage\",\n            \"WebSocket and Server-Sent Events support\",\n            \"Pagination handling\",\n            \"File upload/download capabilities\",\n            \"Webhook signature verification\",\n            \"Real-time data streaming\"\n        ],\n        category: \"core\",\n        importance: \"high\"\n    },\n    {\n        id: \"error-handling\",\n        title: \"Production-Ready Error Handling\",\n        icon: \"ShieldAlert\",\n        description: \"Robust error management with detailed error information for efficient debugging and troubleshooting.\",\n        longDescription: \"Built-in error handling with retry logic, circuit breakers, and detailed error information helps you build resilient applications. Errors include context, suggestions, and automatic retry strategies.\",\n        benefits: [\n            \"Automatic retry with exponential backoff\",\n            \"Circuit breaker pattern implementation\",\n            \"Detailed error context and suggestions\",\n            \"Rate limit handling and queuing\",\n            \"Custom error types for different scenarios\",\n            \"Error logging and monitoring integration\"\n        ],\n        technicalDetails: [\n            \"Hierarchical error types\",\n            \"Configurable retry strategies\",\n            \"Jitter in backoff calculations\",\n            \"Request timeout handling\",\n            \"Dead letter queue for failed requests\",\n            \"Error metrics collection\"\n        ],\n        codeExample: \"import { RateLimitError, NetworkError, RetryManager } from 'macro_api';\\n\\nconst retryManager = new RetryManager({\\n  maxRetries: 3,\\n  baseDelay: 1000,\\n  maxDelay: 30000\\n});\\n\\ntry {\\n  const result = await retryManager.execute(\\n    () => gpt.chat('Hello'),\\n    'chatgpt-completion'\\n  );\\n} catch (error) {\\n  if (error instanceof RateLimitError) {\\n    console.log(`Rate limited. Retry after: ${error.retryAfter}s`);\\n  } else if (error instanceof NetworkError) {\\n    console.log(`Network issue: ${error.message}`);\\n  }\\n}\",\n        category: \"production\",\n        importance: \"high\"\n    },\n    {\n        id: \"promise-based\",\n        title: \"Modern Promise-Based Architecture\",\n        icon: \"Clock\",\n        description: \"Built on modern promise-based architecture, making it easy to integrate with async/await patterns.\",\n        longDescription: \"Fully async/await compatible with support for streaming, parallel execution, and advanced flow control. All operations return promises and support cancellation.\",\n        benefits: [\n            \"Native async/await support\",\n            \"Promise.all() and Promise.allSettled() compatibility\",\n            \"Streaming support for real-time responses\",\n            \"Cancellable operations with AbortController\",\n            \"Parallel request execution\",\n            \"Generator functions for pagination\"\n        ],\n        technicalDetails: [\n            \"AbortController integration\",\n            \"Stream processing with async iterators\",\n            \"Promise timeout handling\",\n            \"Memory-efficient streaming\",\n            \"Backpressure handling\",\n            \"Connection pooling\"\n        ],\n        codeExample: \"// Modern async/await patterns\\nconst controller = new AbortController();\\n\\n// Parallel execution\\nconst [weather, news, stocks] = await Promise.all([\\n  weatherAPI.getCurrent('London'),\\n  newsAPI.getHeadlines(),\\n  stockAPI.getQuotes(['AAPL', 'GOOGL'])\\n]);\\n\\n// Streaming responses\\nfor await (const chunk of gpt.streamChat('Tell me a story')) {\\n  process.stdout.write(chunk);\\n}\\n\\n// Cancellable operations\\nsetTimeout(() => controller.abort(), 5000);\\nconst result = await api.longRunningOperation({ signal: controller.signal });\",\n        category: \"developer-experience\",\n        importance: \"medium\"\n    },\n    {\n        id: \"caching\",\n        title: \"Intelligent Caching System\",\n        icon: \"CheckCircle\",\n        description: \"Built-in caching system with support for memory, Redis, and hybrid caching strategies.\",\n        longDescription: \"Intelligent caching system with support for memory, Redis, and hybrid caching strategies to optimize performance and reduce API costs. Includes cache warming, invalidation, and analytics.\",\n        benefits: [\n            \"Memory and Redis cache providers\",\n            \"Hybrid caching for optimal performance\",\n            \"Automatic cache invalidation\",\n            \"Configurable TTL policies\",\n            \"Cache warming strategies\",\n            \"Cache hit/miss analytics\"\n        ],\n        technicalDetails: [\n            \"LRU eviction policy\",\n            \"Cache compression support\",\n            \"Distributed caching with Redis Cluster\",\n            \"Cache stampede protection\",\n            \"Probabilistic cache warming\",\n            \"Cache metrics and monitoring\"\n        ],\n        codeExample: \"// Configure intelligent caching\\nconst client = new MacroAPIClient({\\n  cache: {\\n    type: 'hybrid',\\n    ttl: 3600, // 1 hour default\\n    maxSize: 1000, // Memory cache size\\n    redis: { \\n      url: process.env.REDIS_URL,\\n      keyPrefix: 'myapp',\\n      cluster: true\\n    },\\n    compression: true\\n  }\\n});\\n\\n// Automatic caching with custom TTL\\nconst result = await client.execute(\\n  () => spotify.search('Daft Punk', ['track']),\\n  {\\n    service: 'spotify',\\n    method: 'search',\\n    params: { query: 'Daft Punk', types: ['track'] },\\n    cacheTtl: 1800 // 30 minutes\\n  }\\n);\\n\\n// Cache statistics\\nconst stats = await client.getCacheStats();\\nconsole.log(`Hit rate: ${(stats.hitRate * 100).toFixed(2)}%`);\",\n        category: \"performance\",\n        importance: \"high\"\n    },\n    {\n        id: \"circuit-breaker\",\n        title: \"Circuit Breaker Pattern\",\n        icon: \"ShieldAlert\",\n        description: \"Built-in circuit breaker pattern to prevent cascading failures and improve system resilience.\",\n        longDescription: \"Implement the circuit breaker pattern to prevent cascading failures when external services are unavailable. Automatically opens circuits when failure thresholds are reached.\",\n        benefits: [\n            \"Prevents cascading failures\",\n            \"Configurable failure thresholds\",\n            \"Automatic recovery detection\",\n            \"Fallback mechanism support\",\n            \"Real-time circuit state monitoring\",\n            \"Graceful degradation\"\n        ],\n        technicalDetails: [\n            \"Three states: Closed, Open, Half-Open\",\n            \"Configurable failure count and time windows\",\n            \"Success threshold for recovery\",\n            \"Metrics collection for monitoring\",\n            \"Per-service circuit configuration\",\n            \"Integration with monitoring systems\"\n        ],\n        codeExample: \"import { CircuitBreaker } from 'macro_api';\\n\\nconst breaker = new CircuitBreaker({\\n  failureThreshold: 5,\\n  recoveryTimeout: 60000, // 1 minute\\n  successThreshold: 3\\n});\\n\\n// Use with fallback\\nconst result = await breaker.execute(\\n  () => externalAPI.getData(),\\n  () => fallbackService.getCachedData() // Fallback function\\n);\\n\\n// Monitor circuit state\\nconsole.log(`Circuit state: ${breaker.getState()}`);\\nconsole.log(`Failure count: ${breaker.getFailureCount()}`);\",\n        category: \"production\",\n        importance: \"medium\"\n    },\n    {\n        id: \"request-batching\",\n        title: \"Request Batching\",\n        icon: \"Layers\",\n        description: \"Automatically batch multiple requests to reduce API calls and improve performance.\",\n        longDescription: \"Intelligent request batching system that automatically groups similar requests together to reduce API calls and improve performance while respecting rate limits.\",\n        benefits: [\n            \"Reduced API call count\",\n            \"Lower latency for bulk operations\",\n            \"Automatic request grouping\",\n            \"Configurable batch sizes\",\n            \"Rate limit optimization\",\n            \"Cost reduction for paid APIs\"\n        ],\n        technicalDetails: [\n            \"Automatic request deduplication\",\n            \"Time-based and size-based batching\",\n            \"Priority queue for urgent requests\",\n            \"Batch splitting for large requests\",\n            \"Partial failure handling\",\n            \"Metrics for batch efficiency\"\n        ],\n        codeExample: \"// Automatic request batching\\nconst batcher = new RequestBatcher({\\n  maxBatchSize: 100,\\n  maxWaitTime: 1000, // 1 second\\n  deduplicate: true\\n});\\n\\n// These requests will be automatically batched\\nconst promises = userIds.map(id => \\n  batcher.execute('getUser', { id })\\n);\\n\\nconst users = await Promise.all(promises);\\n\\n// Manual batching for specific use cases\\nconst batchResult = await api.batchGetUsers({\\n  ids: [1, 2, 3, 4, 5],\\n  fields: ['name', 'email', 'avatar']\\n});\",\n        category: \"performance\",\n        importance: \"medium\"\n    },\n    {\n        id: \"webhook-verification\",\n        title: \"Webhook Verification\",\n        icon: \"ShieldAlert\",\n        description: \"Built-in webhook signature verification for secure event handling from external services.\",\n        longDescription: \"Secure webhook handling with automatic signature verification, payload validation, and replay attack prevention for all supported services.\",\n        benefits: [\n            \"Automatic signature verification\",\n            \"Replay attack prevention\",\n            \"Payload validation\",\n            \"Multi-service webhook support\",\n            \"Event routing and filtering\",\n            \"Error handling and retries\"\n        ],\n        technicalDetails: [\n            \"HMAC signature verification\",\n            \"Timestamp-based replay protection\",\n            \"Configurable tolerance windows\",\n            \"Event type filtering\",\n            \"Middleware-based processing\",\n            \"Dead letter queue for failed events\"\n        ],\n        codeExample: \"import { WebhookVerifier } from 'macro_api';\\n\\nconst verifier = new WebhookVerifier({\\n  stripe: { secret: process.env.STRIPE_WEBHOOK_SECRET },\\n  github: { secret: process.env.GITHUB_WEBHOOK_SECRET },\\n  slack: { secret: process.env.SLACK_WEBHOOK_SECRET }\\n});\\n\\n// Express.js webhook handler\\napp.post('/webhooks/:service', async (req, res) => {\\n  try {\\n    const event = await verifier.verify(\\n      req.params.service,\\n      req.body,\\n      req.headers\\n    );\\n    \\n    // Process verified event\\n    await processWebhookEvent(event);\\n    res.status(200).send('OK');\\n  } catch (error) {\\n    console.error('Webhook verification failed:', error);\\n    res.status(400).send('Invalid signature');\\n  }\\n});\",\n        category: \"production\",\n        importance: \"medium\"\n    },\n    {\n        id: \"rate-limiting\",\n        title: \"Advanced Rate Limiting\",\n        icon: \"Clock\",\n        description: \"Intelligent rate limiting that respects API quotas and automatically handles backoff strategies.\",\n        longDescription: \"Smart rate limiting system that automatically respects API rate limits, implements backoff strategies, and queues requests to maximize throughput while staying within limits.\",\n        benefits: [\n            \"Automatic rate limit detection\",\n            \"Intelligent request queuing\",\n            \"Per-endpoint rate limiting\",\n            \"Adaptive backoff strategies\",\n            \"Priority-based request handling\",\n            \"Rate limit analytics\"\n        ],\n        technicalDetails: [\n            \"Token bucket algorithm\",\n            \"Sliding window rate limiting\",\n            \"Distributed rate limiting with Redis\",\n            \"Per-user and per-API key limits\",\n            \"Rate limit header parsing\",\n            \"Predictive rate limiting\"\n        ],\n        codeExample: \"import { RateLimiter } from 'macro_api';\\n\\nconst limiter = new RateLimiter({\\n  openai: { requestsPerMinute: 60, tokensPerMinute: 90000 },\\n  stripe: { requestsPerSecond: 25 },\\n  spotify: { requestsPerSecond: 10 }\\n});\\n\\n// Automatic rate limiting\\nconst client = new MacroAPIClient({\\n  rateLimiting: {\\n    enabled: true,\\n    strategy: 'adaptive',\\n    queueSize: 1000,\\n    priorityLevels: 3\\n  }\\n});\\n\\n// High priority request\\nconst urgentResult = await client.execute(\\n  () => api.criticalOperation(),\\n  { priority: 'high' }\\n);\\n\\n// Get rate limit status\\nconst status = await limiter.getStatus('openai');\\nconsole.log(`Remaining requests: ${status.remaining}`);\\nconsole.log(`Reset time: ${status.resetTime}`);\",\n        category: \"production\",\n        importance: \"high\"\n    },\n    {\n        id: \"monitoring-observability\",\n        title: \"Monitoring & Observability\",\n        icon: \"CheckCircle\",\n        description: \"Built-in metrics collection, logging, and observability features for production monitoring.\",\n        longDescription: \"Comprehensive monitoring and observability features including metrics collection, structured logging, distributed tracing, and integration with popular monitoring platforms.\",\n        benefits: [\n            \"Automatic metrics collection\",\n            \"Structured logging\",\n            \"Distributed tracing support\",\n            \"Performance monitoring\",\n            \"Error tracking and alerting\",\n            \"Health check endpoints\"\n        ],\n        technicalDetails: [\n            \"OpenTelemetry integration\",\n            \"Prometheus metrics export\",\n            \"Custom metrics and events\",\n            \"Request/response logging\",\n            \"Performance benchmarking\",\n            \"Integration with APM tools\"\n        ],\n        codeExample: \"import { MacroAPIClient, MetricsCollector } from 'macro_api';\\n\\nconst client = new MacroAPIClient({\\n  monitoring: {\\n    enabled: true,\\n    metricsCollector: new MetricsCollector({\\n      exportInterval: 60000, // 1 minute\\n      labels: {\\n        service: 'my-app',\\n        environment: process.env.NODE_ENV\\n      }\\n    }),\\n    tracing: {\\n      serviceName: 'macro-api-client',\\n      jaegerEndpoint: process.env.JAEGER_ENDPOINT\\n    },\\n    logging: {\\n      level: 'info',\\n      format: 'json',\\n      includeRequestBody: false,\\n      includeResponseBody: false\\n    }\\n  }\\n});\\n\\n// Automatic metrics collection\\nconst result = await client.execute(\\n  () => gpt.chat('Hello'),\\n  {\\n    service: 'openai',\\n    method: 'chat',\\n    tags: { operation: 'user-query' }\\n  }\\n);\\n\\n// Custom metrics\\nclient.metrics.increment('custom.api.calls', {\\n  endpoint: '/chat',\\n  status: 'success'\\n});\\n\\n// Health check endpoint\\napp.get('/health', (req, res) => {\\n  const health = client.getHealthStatus();\\n  res.status(health.status === 'healthy' ? 200 : 503).json(health);\\n});\",\n        category: \"production\",\n        importance: \"high\"\n    },\n    {\n        id: \"plugin-system\",\n        title: \"Extensible Plugin System\",\n        icon: \"Layers\",\n        description: \"Flexible plugin architecture for extending functionality and integrating with custom services.\",\n        longDescription: \"Powerful plugin system that allows you to extend macro_api with custom functionality, middleware, and integrations. Create reusable plugins for common patterns and share them across projects.\",\n        benefits: [\n            \"Custom service integrations\",\n            \"Middleware plugin support\",\n            \"Reusable functionality components\",\n            \"Third-party plugin ecosystem\",\n            \"Hot-swappable plugins\",\n            \"Plugin dependency management\"\n        ],\n        technicalDetails: [\n            \"Hook-based plugin architecture\",\n            \"Plugin lifecycle management\",\n            \"Dependency injection system\",\n            \"Configuration validation\",\n            \"Plugin sandboxing\",\n            \"Version compatibility checking\"\n        ],\n        codeExample: \"import { MacroAPIClient, Plugin } from 'macro_api';\\n\\n// Custom plugin for logging\\nclass LoggingPlugin extends Plugin {\\n  name = 'logging-plugin';\\n  version = '1.0.0';\\n\\n  async onRequest(request: any) {\\n    console.log(`[REQUEST] ${request.method} ${request.url}`);\\n    return request;\\n  }\\n\\n  async onResponse(response: any) {\\n    console.log(`[RESPONSE] ${response.status} ${response.statusText}`);\\n    return response;\\n  }\\n\\n  async onError(error: any) {\\n    console.error(`[ERROR] ${error.message}`);\\n    throw error;\\n  }\\n}\\n\\n// Analytics plugin\\nclass AnalyticsPlugin extends Plugin {\\n  name = 'analytics-plugin';\\n  \\n  async onResponse(response: any, context: any) {\\n    await this.trackApiCall({\\n      service: context.service,\\n      method: context.method,\\n      duration: context.duration,\\n      success: !context.error\\n    });\\n    return response;\\n  }\\n}\\n\\n// Use plugins\\nconst client = new MacroAPIClient({\\n  plugins: [\\n    new LoggingPlugin(),\\n    new AnalyticsPlugin({\\n      endpoint: 'https://analytics.example.com',\\n      apiKey: process.env.ANALYTICS_KEY\\n    })\\n  ]\\n});\",\n        category: \"developer-experience\",\n        importance: \"medium\"\n    }\n];\nconst featureCategories = [\n    {\n        id: \"core\",\n        name: \"Core Features\",\n        description: \"Essential functionality that makes macro_api powerful and easy to use\",\n        color: \"blue\",\n        features: features.filter((f)=>f.category === \"core\")\n    },\n    {\n        id: \"developer-experience\",\n        name: \"Developer Experience\",\n        description: \"Features that make development faster, easier, and more enjoyable\",\n        color: \"green\",\n        features: features.filter((f)=>f.category === \"developer-experience\")\n    },\n    {\n        id: \"production\",\n        name: \"Production Ready\",\n        description: \"Enterprise-grade features for reliable, scalable applications\",\n        color: \"purple\",\n        features: features.filter((f)=>f.category === \"production\")\n    },\n    {\n        id: \"performance\",\n        name: \"Performance\",\n        description: \"Optimizations for speed, efficiency, and resource management\",\n        color: \"orange\",\n        features: features.filter((f)=>f.category === \"performance\")\n    }\n];\nconst keyMetrics = [\n    {\n        id: \"api-coverage\",\n        title: \"API Coverage\",\n        value: \"15+\",\n        description: \"Major API services supported\",\n        trend: \"+3 this quarter\",\n        icon: \"Globe\"\n    },\n    {\n        id: \"methods\",\n        title: \"Methods\",\n        value: \"200+\",\n        description: \"Total API methods available\",\n        trend: \"+50 this month\",\n        icon: \"Code\"\n    },\n    {\n        id: \"reliability\",\n        title: \"Reliability\",\n        value: \"99.9%\",\n        description: \"Uptime with error handling\",\n        trend: \"Stable\",\n        icon: \"Shield\"\n    },\n    {\n        id: \"performance\",\n        title: \"Performance\",\n        value: \"< 100ms\",\n        description: \"Average response overhead\",\n        trend: \"-20ms this month\",\n        icon: \"Zap\"\n    },\n    {\n        id: \"type-safety\",\n        title: \"Type Safety\",\n        value: \"100%\",\n        description: \"TypeScript coverage\",\n        trend: \"Full coverage\",\n        icon: \"FileCode\"\n    },\n    {\n        id: \"developer-satisfaction\",\n        title: \"Developer Satisfaction\",\n        value: \"4.8/5\",\n        description: \"Average rating from users\",\n        trend: \"+0.2 this quarter\",\n        icon: \"Heart\"\n    }\n];\nconst comparisonData = [\n    {\n        feature: \"TypeScript Support\",\n        macroApi: \"Full\",\n        competition1: \"Partial\",\n        competition2: \"None\",\n        advantage: \"Complete type safety and IntelliSense\"\n    },\n    {\n        feature: \"Error Handling\",\n        macroApi: \"Advanced\",\n        competition1: \"Basic\",\n        competition2: \"Manual\",\n        advantage: \"Automatic retries, circuit breakers, detailed context\"\n    },\n    {\n        feature: \"Caching\",\n        macroApi: \"Multi-tier\",\n        competition1: \"Memory only\",\n        competition2: \"None\",\n        advantage: \"Memory + Redis + Hybrid with intelligent invalidation\"\n    },\n    {\n        feature: \"API Coverage\",\n        macroApi: \"15+ services\",\n        competition1: \"5-8 services\",\n        competition2: \"3-5 services\",\n        advantage: \"Comprehensive coverage of popular APIs\"\n    },\n    {\n        feature: \"Monitoring\",\n        macroApi: \"Built-in\",\n        competition1: \"Plugin\",\n        competition2: \"External\",\n        advantage: \"Native metrics, tracing, and observability\"\n    },\n    {\n        feature: \"Rate Limiting\",\n        macroApi: \"Intelligent\",\n        competition1: \"Basic\",\n        competition2: \"Manual\",\n        advantage: \"Adaptive algorithms with automatic queue management\"\n    }\n];\nconst useCaseExamples = [\n    {\n        id: \"saas-platform\",\n        title: \"SaaS Platform\",\n        description: \"Build a complete SaaS platform with user management, payments, and AI features\",\n        apis: [\n            \"Stripe\",\n            \"ChatGPT\",\n            \"SendGrid\",\n            \"Slack\"\n        ],\n        complexity: \"Advanced\",\n        timeToImplement: \"2-4 weeks\",\n        features: [\n            \"User authentication and billing\",\n            \"AI-powered features\",\n            \"Email notifications\",\n            \"Team collaboration\"\n        ]\n    },\n    {\n        id: \"content-management\",\n        title: \"Content Management\",\n        description: \"Automate content creation, distribution, and analytics across multiple channels\",\n        apis: [\n            \"ChatGPT\",\n            \"YouTube\",\n            \"Notion\",\n            \"Slack\"\n        ],\n        complexity: \"Intermediate\",\n        timeToImplement: \"1-2 weeks\",\n        features: [\n            \"AI content generation\",\n            \"Multi-platform publishing\",\n            \"Analytics dashboard\",\n            \"Team notifications\"\n        ]\n    },\n    {\n        id: \"ecommerce-automation\",\n        title: \"E-commerce Automation\",\n        description: \"Automate order processing, inventory management, and customer communications\",\n        apis: [\n            \"Stripe\",\n            \"PayPal\",\n            \"SendGrid\",\n            \"Notion\"\n        ],\n        complexity: \"Intermediate\",\n        timeToImplement: \"1-3 weeks\",\n        features: [\n            \"Multi-payment processing\",\n            \"Automated email campaigns\",\n            \"Inventory tracking\",\n            \"Customer analytics\"\n        ]\n    },\n    {\n        id: \"devops-pipeline\",\n        title: \"DevOps Pipeline\",\n        description: \"Complete CI/CD pipeline with deployment automation and monitoring\",\n        apis: [\n            \"GitHub\",\n            \"Vercel\",\n            \"Docker Hub\",\n            \"Slack\",\n            \"S3\"\n        ],\n        complexity: \"Advanced\",\n        timeToImplement: \"2-5 weeks\",\n        features: [\n            \"Automated deployments\",\n            \"Container management\",\n            \"Asset storage\",\n            \"Team notifications\"\n        ]\n    },\n    {\n        id: \"gaming-analytics\",\n        title: \"Gaming Analytics\",\n        description: \"Track player statistics, team performance, and generate leaderboards\",\n        apis: [\n            \"Valorant\",\n            \"Football\",\n            \"Notion\",\n            \"Slack\"\n        ],\n        complexity: \"Beginner\",\n        timeToImplement: \"3-7 days\",\n        features: [\n            \"Player stat tracking\",\n            \"Automated leaderboards\",\n            \"Performance analytics\",\n            \"Achievement notifications\"\n        ]\n    },\n    {\n        id: \"music-platform\",\n        title: \"Music Platform\",\n        description: \"Build music discovery and playlist management features\",\n        apis: [\n            \"Spotify\",\n            \"ChatGPT\",\n            \"Notion\"\n        ],\n        complexity: \"Intermediate\",\n        timeToImplement: \"1-2 weeks\",\n        features: [\n            \"Music search and discovery\",\n            \"AI-powered recommendations\",\n            \"Playlist management\",\n            \"User preferences storage\"\n        ]\n    }\n];\nconst integrationGuides = [\n    {\n        id: \"next-js\",\n        title: \"Next.js Integration\",\n        description: \"Complete guide for using macro_api in Next.js applications\",\n        difficulty: \"Beginner\",\n        timeToComplete: \"15 minutes\",\n        steps: [\n            \"Install macro_api and dependencies\",\n            \"Configure environment variables\",\n            \"Set up API routes\",\n            \"Implement client-side usage\",\n            \"Add error handling\"\n        ]\n    },\n    {\n        id: \"express-js\",\n        title: \"Express.js Backend\",\n        description: \"Build a robust backend API using Express.js and macro_api\",\n        difficulty: \"Intermediate\",\n        timeToComplete: \"30 minutes\",\n        steps: [\n            \"Set up Express server\",\n            \"Configure middleware\",\n            \"Implement API endpoints\",\n            \"Add authentication\",\n            \"Set up webhook handling\"\n        ]\n    },\n    {\n        id: \"serverless\",\n        title: \"Serverless Functions\",\n        description: \"Deploy macro_api in serverless environments\",\n        difficulty: \"Intermediate\",\n        timeToComplete: \"20 minutes\",\n        steps: [\n            \"Configure for serverless\",\n            \"Optimize cold starts\",\n            \"Handle environment variables\",\n            \"Implement caching strategies\",\n            \"Deploy and monitor\"\n        ]\n    },\n    {\n        id: \"docker\",\n        title: \"Docker Deployment\",\n        description: \"Containerize applications using macro_api\",\n        difficulty: \"Advanced\",\n        timeToComplete: \"45 minutes\",\n        steps: [\n            \"Create Dockerfile\",\n            \"Configure environment\",\n            \"Set up health checks\",\n            \"Implement logging\",\n            \"Deploy with orchestration\"\n        ]\n    }\n];\n/* harmony default export */ __webpack_exports__[\"default\"] = (features);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/home/Features.tsx\n"));

/***/ })

});